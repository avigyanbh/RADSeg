defaults:
  - base_mapping

_target_: rayfronts.mapping.SemanticRayFrontiersMap

vox_size: 0.3

# How often do we aggregate voxels into the global representation.
# Setting to 10, will accumulate point clouds from 10 frames before 
# voxelization.
vox_accum_period: 8

# How many points to project per frame. Set to -1 to project all valid depth
# points.
max_pts_per_frame: -1

# How many empty points to project per frame. Set to -1 to project all valid 
# depth points.
max_empty_pts_per_frame: -1

# How many semantic rays to cast per frame. Set to -1 to cast all out of range.
max_rays_per_frame: -1

# Depending on the max sensing range, we project empty voxels up to that range
# if depth was not provided for that pixel. Set to -1 to use the max depth in 
# that frame as the max sensor range.
max_depth_sensing: -1

# The maximum log odds value for empty voxels. 3 means the cell will be capped
# at -3 which corresponds to a probability of e^-3 / ( e^-3 + 1 ) ~= 0.05
# Lower values help compression and responsivness to dynamic objects whereas
# higher values help stability and retention of more evidence.
# (Stored as int8)
max_empty_cnt: 5

# The maximum log odds value for occupied voxels. Same discussion of 
# max_empty_cnt applies here. (Stored as int8)
max_occ_cnt: 30

# How much weight does an occupied observation hold over an empty observation.
occ_observ_weight: 7

# When projecting occupied points, how many points do we project as occupied?
# e.g. Set to 3 to project 3 points centered around the the original depth
# value with vox_size/2 spacing between them. This helps reduce holes in
# surfaces.
# Warning: this has big implications on memory if your features are huge.
occ_thickness: 1

# How often do we prune occupancy into bigger voxels. Set to -1 to disable.
occ_pruning_period: 8

# Tolerance when consolidating voxels into bigger ones.
occ_pruning_tolerance: 2

# How often do we prune semantic voxels to reflect occupancy (That is erase
# semantic voxels that are no longer occupied). Set to -1 to disable.
sem_pruning_period: 8

# Voxels with log-odds occupancy <= this value are removed.
sem_pruning_thresh: 0

## Frontier calculation

# 3D neighborhood radius to compute if a voxel is a frontier or not
fronti_neighborhood_r: 1

# Minimum number of cells in the neighborhood of a cell for it to be considered
# a frontier
fronti_min_unobserved: 9
fronti_min_empty: 4
fronti_min_occupied: 0

# After computing frontiers, we subsample using the below factor.
fronti_subsampling: 5

# When subsampling (Clustering frontiers into bigger cells), how many frontiers
# should lie in the big cell to consider it as a frontier. This is heavilly tied
# to the subsampling factor. Ex. A subsampling factor of 4 means 4^3 cells will
# cluster into one cell.
fronti_subsampling_min_fronti: 12

# Bin size when discretizing the angles of rays in degrees.
angle_bin_size: 20

# How often do we accumulate/bin the rays.
ray_accum_period: 8

# A phase term to offset the ray accumulation such that it does not happen
# with voxel accumulation.
ray_accum_phase: 4

# Should we erode the out of range depth mask before shooting the rays?
# Set to 0 to disable erosion. 1 means an erosion kernel that is 3x3.
ray_erosion: 4

# Enables ray tracing when projecting rays to frontiers. Slows things down but
# gives more accurate ray to frontier placement.
ray_tracing: True

# Instead of using the spatial/dense features for rays, encode the whole image
# into one feature vector.
global_encoding: False 

# Pose graph mode when depth is not available/unreliable, or there is no desire
# for dense voxel mapping. All rays attach to the current location.
zero_depth_mode: False

# Whether to infer frontier directions based on occupancy.
infer_direction: False

feat_compressor: ${oc.select:feat_compressor, null}

interp_mode: ${interp_mode}
